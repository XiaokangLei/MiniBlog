{"_id":"6842667962d0293308fc7ec405f594f0","baidu":"https://pan.baidu.com/s/1wuRTf2YIsKt76TxFufsRNA","download_num":8,"points":2,"tag":"热门","title":"海报组件","_createTime":1657809203248,"_updateTime":1657958412140,"content":"## 题目链接\n\n[牛客网](https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=13)\n\n## 题目描述\n\n在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1。\n\n**数据范围**：0 ≤ n ≤ 10000\n**进阶**：时间复杂度 O(n) ，空间复杂度 O(n)\n\n```html\nInput:\n{2, 3, 1, 0, 2, 5}\n\nOutput:\n2\n```\n\n## 解题思路\n\n要求时间复杂度 O(N)，空间复杂度 O(1)。因此不能使用排序的方法，也不能使用额外的标记数组。\n\n对于这种数组元素在 [0, n-1] 范围内的问题，可以将值为 i 的元素调整到第 i 个位置上进行求解。在调整过程中，如果第 i 位置上已经有一个值为 i 的元素，就可以知道 i 值重复。\n\n以 (2, 3, 1, 0, 2, 5) 为例，遍历到位置 4 时，该位置上的数为 2，但是第 2 个位置上已经有一个 2 的值了，因此可以知道 2 重复：\n\n<div align=\"center\"> <img src=\"https://6669-final-6gypsolb231307a9-1304273986.tcb.qcloud.la/%E5%89%91%E6%8C%87Offer/0001.gif\" width=\"350px\"> </div><br>\n\n### 解题步骤\n\n- step 1：遍历数组，遇到数组元素与下标相同的不用管。\n- step 2：遇到数组元素与下标不同，就将其交换到属于它的位置，交换前检查那个位置是否有相同的元素，若有则重复。\n- step 3：遍历结束完全交换也没重复，则返回-1.\n\n### 示例代码\n\n- Java/C++/Python示例代码\n\n#### Java代码\n\n```java\nimport java.util.*;\npublic class Solution {\n    //交换函数\n    private void swap(int[] numbers, int a, int b){\n        int temp = numbers[a];\n        numbers[a] = numbers[b];\n        numbers[b] = temp;\n    }\n    public int duplicate (int[] numbers) {\n        for(int i = 0; i < numbers.length; i++){\n            //该位置本来就是对的\n            if(numbers[i] == i)\n                continue;\n            //位置不对，需要换到自己对应的位置\n            else{\n                //对应位置相等，重复\n                if(numbers[i] == numbers[numbers[i]])\n                    return numbers[i];\n                //交换位置\n                else\n                    swap(numbers, i, numbers[i]);\n            }\n        }\n        //没有重复\n        return -1;\n    }\n}\n```\n\n#### C++代码\n\n```c++\nclass Solution {\npublic:\n    int duplicate(vector<int>& numbers) {\n        for(int i = 0; i < numbers.size(); i++){\n            //该位置本来就是对的\n            if(numbers[i] == i)\n                continue;\n            //位置不对，需要换到自己对应的位置\n            else{\n                //对应位置相等，重复\n                if(numbers[i] == numbers[numbers[i]])\n                    return numbers[i];\n                //交换位置\n                else\n                    swap(numbers[i], numbers[numbers[i]]);\n            }\n        }\n        //没有重复\n        return -1;\n    }\n};\n```\n\n#### Python代码\n\n```python\nclass Solution:\n    #交换函数\n    def swap(self, numbers: List[int], a: int, b: int):\n        temp = numbers[a]\n        numbers[a] = numbers[b]\n        numbers[b] = temp\n    \n    def duplicate(self , numbers: List[int]) -> int:\n        for i in range(len(numbers)):\n            #该位置本来就是对的\n            if numbers[i] == i:\n                continue\n            #位置不对，需要换到自己对应的位置\n            else:\n                #对应位置相等，重复\n                if numbers[i] == numbers[numbers[i]]:\n                    return numbers[i]\n                #交换位置\n                else:\n                    self.swap(numbers, i, numbers[i])\n        #没有重复\n        return -1\n```\n\n\n\n","totalVisits":81,"defaultImageUrl":"https://6669-final-6gypsolb231307a9-1304273986.tcb.qcloud.la/%E5%89%91%E6%8C%87Offer/Offer_light.jpg?sign=9c78f95f602d8de1e2260c93b631ea2e&t=1656768535"}
